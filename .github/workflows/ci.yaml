# matrix v3
on: [push,pull_request]
env:
  FATAL_WARNINGS_1: "build.rustflags=['-Dwarnings']"
  FATAL_WARNINGS_2: "build.rustdocflags=['-Dwarnings']"
  FATAL_WARNINGS_3: "build.clippyflags=['-Dwarnings']"

jobs:
  ci:
    name: Build (${{ matrix.os }} ${{ matrix.cwd }} ${{ matrix.channel }} ${{ matrix.target }} ${{ matrix.features }})

    runs-on: ${{matrix.os}}


    strategy:
      matrix:
        channel: [""]
        features: [""]
        target: [""]
        cwd: ["."]
        os: [ubuntu-latest]

        include:
          - os: ubuntu-latest
            channel: "+nightly"
            target: "wasm32-unknown-unknown"
            cwd: "."

    steps:
      - uses: actions/checkout@v4

      - name: Cache target
        uses: actions/cache@v4
        with:
          key: target-${{ github.event.repository.name }}-${{ matrix.cwd }}-${{ matrix.os }}-${{ matrix.channel || 'stable'}}-${{ matrix.target || 'host' }}-${{ matrix.features || 'default' }}-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
          path: |
            target
          restore-keys: |
            target-${{ github.event.repository.name }}-${{ matrix.cwd }}-${{ matrix.os }}-${{ matrix.channel || 'stable'}}-${{ matrix.target || 'host' }}-${{ matrix.features || 'default' }}-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
            target-${{ github.event.repository.name }}-${{ matrix.cwd }}-${{ matrix.os }}-${{ matrix.channel || 'stable'}}-${{ matrix.target || 'host' }}-${{ matrix.features || 'default' }}
            target-${{ github.event.repository.name }}-${{ matrix.cwd }}-${{ matrix.os }}-${{ matrix.channel || 'stable'}}-${{ matrix.target || 'host' }}
            target-${{ github.event.repository.name }}-${{ matrix.cwd }}-${{ matrix.os }}-${{ matrix.channel || 'stable'}}
            target-${{ github.event.repository.name }}-${{ matrix.cwd }}-${{ matrix.os }}
            target-${{ github.event.repository.name }}-${{ matrix.cwd }}
            target-${{ github.event.repository.name }}

      # Compute reusable args once
      - name: Compute cargo args
        id: args
        shell: bash
        env:
          FEATURE_FLAGS: ${{ matrix.features }}
          TARGET: ${{ matrix.target }}
        run: |
          set -euo pipefail
          FEATURES_ARG=""
          TARGET_ARG=""
          if [ -n "${FEATURE_FLAGS}" ]; then
            FEATURES_ARG="--features=${FEATURE_FLAGS}"
          fi
          if [ -n "${TARGET}" ]; then
            TARGET_ARG="--target=${TARGET}"
          fi
          echo "features=${FEATURES_ARG}" >> "$GITHUB_OUTPUT"
          echo "target=${TARGET_ARG}"   >> "$GITHUB_OUTPUT"
          echo "features are ${FEATURES_ARG}"
          echo "target is ${TARGET_ARG}"

      #      - name: Github update Rust
      #        if: runner.os == 'Linux' && !(env.GITEA_ACTIONS == 'true')
      #        run: |
      #          # at the moment, GitHub is too far behind mainline rust (v1.89.0-v1.91.0-nightly)
      #          rustup update
      - name: Install wasm target
        if: matrix.target == 'wasm32-unknown-unknown' && !(env.GITEA_ACTIONS == 'true')
        run: rustup ${{ matrix.channel}} target add wasm32-unknown-unknown

      - name: Install wasm-bindgen-cli
        if: matrix.target == 'wasm32-unknown-unknown' && !(env.GITEA_ACTIONS == 'true')
        run: cargo ${{ matrix.channel }} install wasm-bindgen-cli

      - name: Install nightly components
        if: matrix.channel == '+nightly' && !(env.GITEA_ACTIONS == 'true')
        run: |
          rustup ${{ matrix.channel }} component add rustfmt clippy
          rustup ${{ matrix.channel }} component add rust-src

      - name: Demand a valid wayland server
        run: |
          weston --backend=headless --socket=$WAYLAND_DISPLAY --idle-time=0 >/tmp/weston.log 2>&1 &
          # wait a moment for the socket to appear
          for i in {1..20}; do test -S "$XDG_RUNTIME_DIR/$WAYLAND_DISPLAY" -o -S "/run/user/$(id -u)/$WAYLAND_DISPLAY" && break || sleep 0.2; done

      - name: rustfmt
        run: cd ${{ matrix.cwd }} && cargo ${{ matrix.channel }} --config "$FATAL_WARNINGS_1"  --config "$FATAL_WARNINGS_2"  --config "$FATAL_WARNINGS_3" fmt --check

      - name: cargo check
        run: cd ${{ matrix.cwd }} && cargo ${{ matrix.channel }}  --config "$FATAL_WARNINGS_1"  --config "$FATAL_WARNINGS_2"  --config "$FATAL_WARNINGS_3"  check ${{ steps.args.outputs.features }} ${{ steps.args.outputs.target }}

      - name: clippy
        run: cd ${{ matrix.cwd }} && cargo ${{ matrix.channel }} --config "$FATAL_WARNINGS_1"  --config "$FATAL_WARNINGS_2"  --config "$FATAL_WARNINGS_3" clippy --no-deps ${{ steps.args.outputs.features }} ${{ steps.args.outputs.target }}

      - name: docs
        run: cd ${{ matrix.cwd }} && cargo ${{ matrix.channel }}  --config "$FATAL_WARNINGS_1"  --config "$FATAL_WARNINGS_2"  --config "$FATAL_WARNINGS_3" doc ${{ steps.args.outputs.features }} ${{ steps.args.outputs.target }}

      - name: tests
        env: # wayland hacks
          WAYLAND_DISPLAY: wayland-ci-0
        run: cd ${{ matrix.cwd }} && CARGO_TARGET_WASM32_UNKNOWN_UNKNOWN_RUNNER="wasm-bindgen-test-runner" cargo ${{ matrix.channel }}  --config "$FATAL_WARNINGS_1"  --config "$FATAL_WARNINGS_2"  --config "$FATAL_WARNINGS_3" test ${{ steps.args.outputs.features }} ${{ steps.args.outputs.target }}
